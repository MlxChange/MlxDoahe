package com.example.mlx.daohe.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.mlx.daohe.entiy.Want;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WANT".
*/
public class WantDao extends AbstractDao<Want, Long> {

    public static final String TABLENAME = "WANT";

    /**
     * Properties of entity Want.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Friendname = new Property(2, String.class, "friendname", false, "FRIENDNAME");
        public final static Property Imgurl = new Property(3, String.class, "imgurl", false, "IMGURL");
        public final static Property State = new Property(4, boolean.class, "state", false, "STATE");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property RequestTime = new Property(6, long.class, "requestTime", false, "REQUEST_TIME");
        public final static Property ResponseTime = new Property(7, long.class, "responseTime", false, "RESPONSE_TIME");
        public final static Property Message = new Property(8, String.class, "message", false, "MESSAGE");
        public final static Property Jingdu = new Property(9, double.class, "jingdu", false, "JINGDU");
        public final static Property Weidu = new Property(10, double.class, "weidu", false, "WEIDU");
        public final static Property Content = new Property(11, String.class, "content", false, "CONTENT");
        public final static Property Phonenumber = new Property(12, String.class, "phonenumber", false, "PHONENUMBER");
    }


    public WantDao(DaoConfig config) {
        super(config);
    }
    
    public WantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"FRIENDNAME\" TEXT," + // 2: friendname
                "\"IMGURL\" TEXT," + // 3: imgurl
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"TYPE\" TEXT," + // 5: type
                "\"REQUEST_TIME\" INTEGER NOT NULL ," + // 6: requestTime
                "\"RESPONSE_TIME\" INTEGER NOT NULL ," + // 7: responseTime
                "\"MESSAGE\" TEXT," + // 8: message
                "\"JINGDU\" REAL NOT NULL ," + // 9: jingdu
                "\"WEIDU\" REAL NOT NULL ," + // 10: weidu
                "\"CONTENT\" TEXT," + // 11: content
                "\"PHONENUMBER\" TEXT);"); // 12: phonenumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Want entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String friendname = entity.getFriendname();
        if (friendname != null) {
            stmt.bindString(3, friendname);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(4, imgurl);
        }
        stmt.bindLong(5, entity.getState() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getRequestTime());
        stmt.bindLong(8, entity.getResponseTime());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(9, message);
        }
        stmt.bindDouble(10, entity.getJingdu());
        stmt.bindDouble(11, entity.getWeidu());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(13, phonenumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Want entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String friendname = entity.getFriendname();
        if (friendname != null) {
            stmt.bindString(3, friendname);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(4, imgurl);
        }
        stmt.bindLong(5, entity.getState() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
        stmt.bindLong(7, entity.getRequestTime());
        stmt.bindLong(8, entity.getResponseTime());
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(9, message);
        }
        stmt.bindDouble(10, entity.getJingdu());
        stmt.bindDouble(11, entity.getWeidu());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
 
        String phonenumber = entity.getPhonenumber();
        if (phonenumber != null) {
            stmt.bindString(13, phonenumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Want readEntity(Cursor cursor, int offset) {
        Want entity = new Want( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // friendname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imgurl
            cursor.getShort(offset + 4) != 0, // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.getLong(offset + 6), // requestTime
            cursor.getLong(offset + 7), // responseTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // message
            cursor.getDouble(offset + 9), // jingdu
            cursor.getDouble(offset + 10), // weidu
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // content
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // phonenumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Want entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFriendname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImgurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.getShort(offset + 4) != 0);
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRequestTime(cursor.getLong(offset + 6));
        entity.setResponseTime(cursor.getLong(offset + 7));
        entity.setMessage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJingdu(cursor.getDouble(offset + 9));
        entity.setWeidu(cursor.getDouble(offset + 10));
        entity.setContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhonenumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Want entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Want entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Want entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
